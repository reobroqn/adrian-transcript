Welcome back and in this lesson I want to talk in detail about security groups within AWS.

These are the second type of security filtering feature commonly used within AWS.

The other type being network access control lists which we've previously discussed.

So security groups and NACLs share many broad concepts but the way they operate is very different.

and it's essential that you understand those differences and the features offered by security groups for both the exam and real world usage.

So let's just jump in and get started.

In the lesson on network access control lists,

I explained that they're stateless and by now you know what stateless and stateful mean.

Security groups are stateful.

They detect response traffic automatically for a given request.

And this means that if you allow an inbound or outbound request, then the response is automatically allowed.

You don't have to worry about configuring ephemeral ports.

It's all handled by the product.

If you have a web server operating on TCP port 443 and you want to allow access from the public internet, then you will add an inbound security group rule, allowing inbound traffic on TCP port 443.

and the response which is using ephemeral ports is automatically allowed.

Now security groups do have a major limitation and that's that there is no explicit deny.

You can use them to allow traffic or you can use them to not allow traffic and this is known as an implicit deny.

So if you don't explicitly allow traffic then you're implicitly denying it.

but you can't, and this is important, you're unable to explicitly deny traffic using security groups and this means that they can't be used to block specific bad actors. Imagine you allow all source

IP addresses to connect to an instance on port 443 but then you discover a single bad actor is attempting to exploit your web server. Well you can't use security groups to block that one specific IP address or that one specific range. If you allow an IP or if you allow an IP range or even if you allow all IP addresses then security groups cannot be used to deny a subset of those and that's why typically you'll use network access control lists in conjunction with security groups where the NACLs are used to add explicit denies. Now security groups operate above

NACLs on the OSI 7 layer stack which means that they have more features. They support IP and CIDR based rules but they also allow referencing AWS logical resources. This includes other security groups and even itself within rules. I'll be covering exactly how this works on the next few screens. Just know at this stage that it enables some really advanced functionality. An important thing to understand is that security groups are not attached to instances, nor are they attached to subnets.

They're actually attached to specific elastic network interfaces known as ENIs.

Now, even if you see the user interface present this as being able to attach a security group to an instance, know that this isn't what happens.

When you attach a security group to an instance, what it's actually doing is attaching the security group to the primary network interface of that instance.

So remember, security groups are attached to network interfaces.

That's an important one to remember for the exam.

Now, at this point, let's step through some of the unique features of security groups, and it's probably better to do this visually.

Let's start with a public subnet containing an EC2 instance, and this instance has an attached primary elastic network interface.

On the right side we have a customer, Bob, and Bob is accessing the instance using HTTPS.

So this means TCP port 443.

Conceptually think of security groups as something which surrounds network interfaces.

In this case the primary interface of the EC2 instance.

Now this is how a typical security group might look.

It has inbound and outbound rules just like a network ACL.

and this particular example is showing the inbound rules allowing TCP port 443 to connect from any source.

The security group applies to all traffic which enters or leaves the network interface and because they're stateful in this particular case because we've allowed TCP port 443 as the request portion of the communication the corresponding response part, the connection from the instance back to Bob is automatically allowed.

Now lastly, and I'm going to repeat this point several times throughout this lesson, security groups cannot explicitly block traffic.

This means with this example, if you're allowing 0.0.0.0/0 to access the instance on port TCP port 443, and this means the whole IP version for internet, then you can't block anything specific.

Imagine Bob is actually a bad actor. Well in this situation security groups cannot be used to add protection. You can't add an explicit deny for Bob's IP address. That's not something that security groups are capable of. Okay so that's the basics. Now let's look at some of the advanced bits of security group functionality. Security groups are capable of using logical references. Let's step through how this works with a similar example to the one you just saw. We start with a VPC containing a public web subnet and a private application subnet. Inside the web subnet is the 'categram application web instance' and inside the app subnet is the 'backend application instance'.

Both of these are protected by security groups.

We have A4L-web and A4L-app.

Traffic wise, we have Bob accessing the web instance over port TCP, port 443.

And because this is the entry point for the application, which logically has other users than just Bob, we're allowing TCP port 443 from any IP version four address.

And this means we have a security group security group with an inbound rule set which looks like this.

In addition to this front end traffic the web instance also needs to connect with the application instance and for this example let's say this is using TCP port 1337 our application is that good. So how best to allow this communication? Well we could just add the IP address of the web instance into the security group of the application instance or if you wanted to allow our application to scale and change IPs then we could add the CIDR ranges of the subnets instead of IP addresses so that's possible but it's not taking advantage of the extra functionality which security groups provide what we could do is reference the web security group within the application security group so this is an example of the application security group group. Notice that it allows TCP port 1337 inbound but it references as the source a logical resource, the security group. Now using a logical resource reference in this way means that the source reference, so the A4L-web security group, this actually references anything which has this security group associated with it. So in this example any instances which have the A4L-web security group attached to them can connect to any instances which have the

A4L-app security group attached to them using TCP port 1337. So in essence this references this so this logical reference within the application security group references the web security group and anything which has the web security group attached to it. Now this means we don't have to worry about IP addresses or CIDR ranges and it also has another benefit it scales really well so as additional instances are added to the application subnet and web subnet and as those instances are attached to the relevant security groups they're impacted by this logical referencing allowing anything defined within the security group to apply to any new instances automatically. Now this

This is critical to understand, so when you reference a security group from another security group, what you're actually doing is referencing any resources which have that security group associated with them.

So this substantially reduces the admin overhead when you have multi-tiered applications.

And it also simplifies security management, which means it's prone to less errors.

Now, logical references provide even more functionality.

They allow self-referencing. Let's take this as an example.

A private subnet inside AWS with an ever-changing number of application instances.

Right now it's three, but it might be three, thirty or one.

What we can do is create a security group like this.

This one allows incoming communications on port TCP 1337 from the web security group, but it also has this rule, which is a self referential rule, allowing all traffic.

What this means is that if it's attached to all of the instances, then anything with this security group attached can receive communication, so all traffic from this security group.

And this effectively means anything that also has this security group attached to it.

So it allows communications to occur to instances which have it attached from instances which have it attached.

It handles any IP changes automatically which is useful if these instances are within an auto scaling group which is provisioning and terminating instances based on load on the system.

It also allows for simplified management of any intra-app communications and examples of this might be Microsoft domain controllers or managing application high availability within clusters.

So this is everything I wanted to cover about security groups within AWS.

So there's a lot of functionality and intelligence that you gain by using security groups versus network ACLs.

But it's important that you understand that while network ACLs do allow you to explicitly deny traffic, security groups don't.

and so generally you would use network ACLs to explicitly block any bad actors and use security groups to allow traffic to your VPC based resources. You do this because security groups are capable of this logical resource referencing and that means AWS logical resources, it means security groups or even itself to allow this free flow of communications within a security group. At this

At this point though that is everything I wanted to cover in this lesson so go ahead and complete the video and when you're ready I'll look forward to you joining me in the next lesson.